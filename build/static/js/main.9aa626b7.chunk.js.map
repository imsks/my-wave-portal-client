{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","waveCount","setWaveCount","miningStatus","setMiningStatus","allWaves","setAllWaves","message","setMessage","contractAddress","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalAddress","Contract","WavePortal","abi","getTotalWaves","count","toNumber","getAllWaves","useEffect","connectWallet","alert","wave","gasLimit","waveTxn","wait","waves","wavesCleaned","forEach","push","address","from","timestamp","Date","wavePortalContract","onNewWave","prevState","on","off","connectWalletButton","className","onClick","role","aria-label","rows","placeholder","onChange","event","target","value","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9aa626b7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport WavePortal from \"./utils/WavePortal.json\";\n\nexport default function App() {\n    const [currentAccount, setCurrentAccount] = useState(null);\n    const [waveCount, setWaveCount] = useState(0);\n    const [miningStatus, setMiningStatus] = useState(null);\n    const [allWaves, setAllWaves] = useState([]);\n    const [message, setMessage] = useState(\"\");\n\n    const contractAddress = \"0x8051A25EB5aE7f95Bf381aE0384fE9e3e42C16F9\";\n\n    const checkIfWalletIsConnected = async () => {\n        const { ethereum } = window;\n\n        if (!ethereum) {\n            console.log(\"Make sure you have metamask installed and logged in\");\n            return;\n        }\n\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n        if (accounts.length !== 0) {\n            const [account] = accounts;\n\n            setCurrentAccount(account);\n\n            const contractAddress =\n                \"0xF0849c244CF1737c57A3155d7DfEc50F13398aF5\";\n\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const wavePortalAddress = new ethers.Contract(\n                contractAddress,\n                WavePortal.abi,\n                signer\n            );\n\n            let count = await wavePortalAddress.getTotalWaves();\n            setWaveCount(count.toNumber());\n            getAllWaves();\n        } else {\n            console.log(\"No accounts found\");\n        }\n    };\n\n    useEffect(() => {\n        checkIfWalletIsConnected();\n    }, []);\n\n    const connectWallet = async () => {\n        try {\n            const { ethereum } = window;\n            if (!ethereum) {\n                alert(\"Get MetaMask!\");\n                return;\n            }\n\n            const accounts = await ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n\n            const [account] = accounts;\n\n            setCurrentAccount(account);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const wave = async () => {\n        try {\n            const { ethereum } = window;\n\n            if (!ethereum) {\n                alert(\"Get MetaMask!\");\n                return;\n            }\n\n            setMiningStatus(\"Waving...\");\n\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const wavePortalAddress = new ethers.Contract(\n                contractAddress,\n                WavePortal.abi,\n                signer\n            );\n\n            const waveTxn = await wavePortalAddress.wave(message, {\n                gasLimit: 300000,\n            });\n            await waveTxn.wait();\n\n            const count = await wavePortalAddress.getTotalWaves();\n            setMiningStatus(\"Hi, You just waved at me. Thanks!\");\n            setWaveCount(count.toNumber());\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const getAllWaves = async () => {\n        try {\n            const { ethereum } = window;\n\n            if (!ethereum) {\n                alert(\"Get MetaMask!\");\n                return;\n            }\n\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const wavePortalAddress = new ethers.Contract(\n                contractAddress,\n                WavePortal.abi,\n                signer\n            );\n\n            const waves = await wavePortalAddress.getAllWaves();\n\n            let wavesCleaned = [];\n\n            waves.forEach((wave) => {\n                wavesCleaned.push({\n                    address: wave.from,\n                    timestamp: new Date(wave.timestamp.toNumber() * 1000),\n                    message: wave.message,\n                });\n            });\n\n            setAllWaves(wavesCleaned);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    /**\n     * Listen in for emitter events!\n     */\n    useEffect(() => {\n        let wavePortalContract;\n\n        const onNewWave = (from, timestamp, message) => {\n            console.log(\"NewWave\", from, timestamp, message);\n            setAllWaves((prevState) => [\n                ...prevState,\n                {\n                    address: from,\n                    timestamp: new Date(timestamp * 1000),\n                    message: message,\n                },\n            ]);\n        };\n\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n\n            wavePortalContract = new ethers.Contract(\n                contractAddress,\n                WavePortal.abi,\n                signer\n            );\n            wavePortalContract.on(\"NewWave\", onNewWave);\n        }\n\n        return () => {\n            if (wavePortalContract) {\n                wavePortalContract.off(\"NewWave\", onNewWave);\n            }\n        };\n    }, []);\n\n    const connectWalletButton = !currentAccount && (\n        <button className=\"waveButton\" onClick={connectWallet}>\n            Connect wallet\n        </button>\n    );\n\n    return (\n        <div className=\"body\">\n            <div className=\"dataContainer\">\n                <div className=\"header\">\n                    <span role=\"img\" aria-label=\"wave\">\n                        ðŸ‘‹\n                    </span>{\" \"}\n                    Hey there!\n                </div>\n\n                <div className=\"bio\">\n                    I'm Sachin, a full stack engineer. Connect your Ethereum\n                    wallet and wave at me!\n                </div>\n\n                <textarea\n                    rows=\"10\"\n                    placeholder=\"Say something about me.\"\n                    onChange={(event) => setMessage(event.target.value)}\n                ></textarea>\n\n                <button className=\"waveButton\" onClick={wave}>\n                    Wave at Me\n                </button>\n                {connectWalletButton}\n                <h4 className=\"text\">Total wave count: {waveCount}</h4>\n                <h4 className=\"text\">{miningStatus}</h4>\n                {allWaves.map((wave, index) => {\n                    return (\n                        <div\n                            key={index}\n                            style={{\n                                backgroundColor: \"OldLace\",\n                                marginTop: \"16px\",\n                                padding: \"8px\",\n                            }}\n                        >\n                            <div>Address: {wave.address}</div>\n                            <div>Time: {wave.timestamp.toString()}</div>\n                            <div>Message: {wave.message}</div>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}