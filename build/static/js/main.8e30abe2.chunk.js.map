{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","waveCount","setWaveCount","miningStatus","setMiningStatus","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalAddress","Contract","WavePortal","abi","getTotalWaves","count","toNumber","useEffect","connectWallet","alert","wave","waveTxn","wait","connectWalletButton","className","onClick","role","aria-label","ReactDOM","render","document","getElementById"],"mappings":"4zTAKe,SAASA,IACpB,MAA4CC,mBAAS,MAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAkCF,mBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAwCJ,mBAAS,MAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMC,EAAwB,uCAAG,4CAAAC,EAAA,2DACRC,OAAbC,EADqB,EACrBA,SADqB,uBAIzBC,QAAQC,IAAI,uDAJa,0CAQNF,EAASG,QAAQ,CAAEC,OAAQ,iBARrB,UAUL,KAFlBC,EARuB,QAUhBC,OAVgB,sCAWPD,EAXO,GAWlBE,EAXkB,KAazBf,EAAkBe,GAGd,6CAEEC,EAAW,IAAIC,IAAOC,UAAUC,aAAaX,GAC7CY,EAASJ,EAASK,YAClBC,EAAoB,IAAIL,IAAOM,SAJjC,6CAMAC,EAAWC,IACXL,GAvBqB,UA0BPE,EAAkBI,gBA1BX,QA0BrBC,EA1BqB,OA2BzBzB,EAAayB,EAAMC,YA3BM,wBA6BzBnB,QAAQC,IAAI,qBA7Ba,4CAAH,qDAiC9BmB,qBAAU,WACNxB,MACD,IAEH,IAAMyB,EAAa,uCAAG,oCAAAxB,EAAA,oEAEOC,OAAbC,EAFM,EAENA,SAFM,uBAIVuB,MAAM,iBAJI,0CAQSvB,EAASG,QAAQ,CACpCC,OAAQ,wBATE,OAQRC,EARQ,qBAYIA,EAZJ,GAYPE,EAZO,KAcdf,EAAkBe,GAdJ,kDAgBdN,QAAQC,IAAR,MAhBc,0DAAH,qDAoBbsB,EAAI,uCAAG,wCAAA1B,EAAA,oEAEgBC,OAAbC,EAFH,EAEGA,SAFH,uBAKDuB,MAAM,iBALL,iCASL3B,EAAgB,aAGZ,6CAEEY,EAAW,IAAIC,IAAOC,UAAUC,aAAaX,GAC7CY,EAASJ,EAASK,YAClBC,EAAoB,IAAIL,IAAOM,SAJjC,6CAMAC,EAAWC,IACXL,GAnBC,UAsBiBE,EAAkBU,OAtBnC,eAsBCC,EAtBD,iBAuBCA,EAAQC,OAvBT,yBAyBeZ,EAAkBI,gBAzBjC,QAyBCC,EAzBD,OA0BLvB,EAAgB,qCAChBF,EAAayB,EAAMC,YA3Bd,kDA6BLnB,QAAQC,IAAR,MA7BK,0DAAH,qDAiCJyB,GAAuBpC,GACzB,4BAAQqC,UAAU,aAAaC,QAASP,GAAxC,kBAKJ,OACI,yBAAKM,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,UACX,0BAAME,KAAK,MAAMC,aAAW,QAA5B,gBAEQ,IAHZ,cAOA,yBAAKH,UAAU,OAAf,mFAKA,4BAAQA,UAAU,aAAaC,QAASL,GAAxC,cAGCG,EACD,wBAAIC,UAAU,QAAd,qBAAwCnC,GACxC,wBAAImC,UAAU,QAAQjC,KCzHtCqC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.8e30abe2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport WavePortal from \"./utils/WavePortal.json\";\n\nexport default function App() {\n    const [currentAccount, setCurrentAccount] = useState(null);\n    const [waveCount, setWaveCount] = useState(0);\n    const [miningStatus, setMiningStatus] = useState(null);\n\n    const checkIfWalletIsConnected = async () => {\n        const { ethereum } = window;\n\n        if (!ethereum) {\n            console.log(\"Make sure you have metamask installed and logged in\");\n            return;\n        }\n\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n        if (accounts.length !== 0) {\n            const [account] = accounts;\n\n            setCurrentAccount(account);\n\n            const contractAddress =\n                \"0xF0849c244CF1737c57A3155d7DfEc50F13398aF5\";\n\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const wavePortalAddress = new ethers.Contract(\n                contractAddress,\n                WavePortal.abi,\n                signer\n            );\n\n            let count = await wavePortalAddress.getTotalWaves();\n            setWaveCount(count.toNumber());\n        } else {\n            console.log(\"No accounts found\");\n        }\n    };\n\n    useEffect(() => {\n        checkIfWalletIsConnected();\n    }, []);\n\n    const connectWallet = async () => {\n        try {\n            const { ethereum } = window;\n            if (!ethereum) {\n                alert(\"Get MetaMask!\");\n                return;\n            }\n\n            const accounts = await ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n\n            const [account] = accounts;\n\n            setCurrentAccount(account);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const wave = async () => {\n        try {\n            const { ethereum } = window;\n\n            if (!ethereum) {\n                alert(\"Get MetaMask!\");\n                return;\n            }\n\n            setMiningStatus(\"Waving...\");\n\n            const contractAddress =\n                \"0xF0849c244CF1737c57A3155d7DfEc50F13398aF5\";\n\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const wavePortalAddress = new ethers.Contract(\n                contractAddress,\n                WavePortal.abi,\n                signer\n            );\n\n            const waveTxn = await wavePortalAddress.wave();\n            await waveTxn.wait();\n\n            const count = await wavePortalAddress.getTotalWaves();\n            setMiningStatus(\"Hi, You just waved at me. Thanks!\");\n            setWaveCount(count.toNumber());\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const connectWalletButton = !currentAccount && (\n        <button className=\"waveButton\" onClick={connectWallet}>\n            Connect wallet\n        </button>\n    );\n\n    return (\n        <div className=\"body\">\n            <div className=\"dataContainer\">\n                <div className=\"header\">\n                    <span role=\"img\" aria-label=\"wave\">\n                        ðŸ‘‹\n                    </span>{\" \"}\n                    Hey there!\n                </div>\n\n                <div className=\"bio\">\n                    I'm Sachin, a full stack engineer. Connect your Ethereum\n                    wallet and wave at me!\n                </div>\n\n                <button className=\"waveButton\" onClick={wave}>\n                    Wave at Me\n                </button>\n                {connectWalletButton}\n                <h4 className=\"text\">Total wave count: {waveCount}</h4>\n                <h4 className=\"text\">{miningStatus}</h4>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}